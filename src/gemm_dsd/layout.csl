// This program computes A*B on a height-by-width PE rectangle
// The matrix A in grid CSC format is distributed to every PE via memcpy
// The matrix B is distributed to first row PEs via memcpy
// Pw.0, ..., Pw.h send out the result C_final via memcpy, where h = height-1 and w = width-1.
// Note that this is the right-hand side column of PEs
//
// Each PE receives the local matrices representing A and B and computes A*B locally, then performs a row reduction
// The last column of PEs finally contains the corresponding rows of C and sends its result back to the host
//

// global routing colors
param LAUNCH_ID: i16;

// Lengths
//    A_val     A_val_len x 1
//    A_rowidx  A_rowidx_len x 1
//    A_colptr  A_colptr_len x 1
//    B         Kt x M
//    C         Nt x M
//
// The unit test sets up the parameters Nt, Kt and M via cslc
//    Nt = N / height
//    Kt  = K / width
//    M
// where N, K and M are dimensions of global tensors A_global, B_global and C_global
//    A_global is N x K (remember: represented in CSC format)
//    B_global is K x M
//    C_global is N x M

param Nt:i32;         
param Kt:i32; 
param M:i32;  

param width: i16;
param height: i16;

const LAUNCH : color = @get_color(LAUNCH_ID);

// Utilize checkerboard pattern for routing
const RXACT_B_ODD: color  = @get_color(8) ;  // broadcast B
const RXACT_B_EVEN: color  = @get_color(9) ; 
const C_REDUCE_ODD: color     = @get_color(10) ;  // row reduction C
const C_REDUCE_EVEN: color = @get_color(11);

// local tasks
const COMP: color     = @get_color(12) ;
const REDUCE: color   = @get_color(13) ;

// neither routing color nor local task
const NONE: color     = @get_color(15) ; // NONE is don't care (neither routing color nor entrypoint)
                             // the compiler emits an error for un-initialized colors or parameters
                             // binding a non-routing local color to NONE to avoid the compilation error
const EXIT: color     = @get_color(17);

const memcpy = @import_module( "<memcpy_multi/get_params>", .{
    .width = width,
    .height = height
    });


layout{

    // step 1: configure the rectangle which does not include halo
    @set_rectangle(width, height);

    // set common parameters that are shared across every PE
    const comm_params = .{
        .COMP=COMP,
        .REDUCE=REDUCE,
        .Nt=Nt,
        .Kt=Kt,
        .M=M,
        .height = height,
        .width = width,
        .LAUNCH = LAUNCH,
        .EXIT = EXIT
    };

    // The routing and coloring works as follows
    // Note that it is neccessary to utilize the checkerboard pattern for the routing
    // to ensure no color overlap
    // 
    // ====== C routing ======
    // First column of PEs:                 Only send out C via C_REDUCE_EVEN color
    // Odd intermediate columns of PEs:     Receive via C_REDUCE_EVEN and send via C_REDUCE_ODD colors
    // Even intermediate columns of PEs:    Receive via C_REDUCE_ODD and send via C_REDUCE_EVEN colors
    // Last column of PEs:                  If odd: receive C_REDUCE_EVEN. Else receive C_REDUCE_ODD
    // ====== C colors ======
    // First column of PEs:                 C_REDUCE_EVEN = .{ .rx = .{RAMP},  .tx = .{EAST} }    
    // Odd intermediate columns of PEs:     C_REDUCE_EVEN = .{ .rx = .{WEST}, .tx = .{RAMP}  }, C_REDUCE_ODD = { .rx = .{RAMP}, .tx = .{EAST}  }
    // Even intermediate columns of PEs:    C_REDUCE_EVEN = .{ .rx = .{RAMP}, .tx = .{EAST}  }, C_REDUCE_ODD = { .rx = .{WEST}, .tx = .{RAMP}  }
    // Last column of PEs:                  If odd: C_REDUCE_EVEN = .{ .rx = .{WEST}, .tx = .{RAMP} }, otherwise C_REDUCE_ODD = .{ .rx = .{WEST}, .tx = .{RAMP} }
    //
    // ====== B routing ======
    // First row of PEs:                    Only send out B via RXACT_B_EVEN color
    // Odd intermediate rows of PEs:        Receive via RXACT_B_EVEN and send via RXACT_B_ODD colors
    // Even intermediate rows of PEs:       Receive via RXACT_B_ODD and send via RXACT_B_EVEN colors
    // Last row of PEs:                     If odd: receive RXACT_B_EVEN. Else receive RXACT_B_ODD
    // ====== B colors ======
    // First row of PEs:                    RXACT_B_EVEN = .{ .rx = .{RAMP},  .tx = .{SOUTH} }    
    // Odd intermediate rows of PEs:        RXACT_B_EVEN = .{ .rx = .{NORTH}, .tx = .{RAMP}  }, RXACT_B_ODD = .{ .rx = .{RAMP}, .tx = .{SOUTH}  }
    // Even intermediate rows of PEs:       RXACT_B_EVEN = .{ .rx = .{RAMP}, .tx = .{SOUTH}  }, RXACT_B_ODD = .{ .rx = .{NORTH}, .tx = .{RAMP}  }
    // Last row of PEs:                     If odd: RXACT_B_EVEN = .{ .rx = .{NORTH}, .tx = .{RAMP} }, otherwise RXACT_B_ODD = .{ .rx = .{NORTH}, .tx = .{RAMP} }


    // Here we define the color config routes (ccr)
    // Notation:
    // ccr_SYMBOL_RECV.SEND
    const ccr_B_RS = .{ .rx = .{RAMP},  .tx = .{SOUTH} };
    const ccr_B_NR = .{ .rx = .{NORTH},  .tx = .{RAMP} };
    const ccr_C_RE = .{ .rx = .{RAMP},  .tx = .{EAST} };
    const ccr_C_WR = .{ .rx = .{WEST}, .tx = .{RAMP} };

    for (@range(i16, width)) |pe_x| {

        // Params are retrieved for the whole PE column
        const memcpyParams_col = memcpy.get_params(pe_x);

        for (@range(i16, height)) |pe_y| {
            
            // step 2: compile csl code for a set of PEx.y and generate out_x_y.elf
            //   format: @set_tile_code(x, y, code.csl, param_binding);
            
            // Since every variable has to be known at compile time, this gets really messy.
            // Could certainly get simplified with common variables.
            // Refer to comments above for specific routing data
            if(pe_x == 0){

                if(pe_y == 0){
                    // px = 0, pe_y = 0

                    const route = @concat_structs(
                        .{ .RXACT_B = NONE, .TXACT_B=RXACT_B_EVEN, .RXACT_C = NONE, .TXACT_C = C_REDUCE_EVEN},
                        .{ .memcpyParams = memcpyParams_col } );
                    
                    @set_tile_code(pe_x, pe_y, "spmm_csc_memcpy.csl", @concat_structs(route, comm_params) );
                    @set_color_config(pe_x, pe_y, C_REDUCE_EVEN, .{ .routes = ccr_C_RE });
                    @set_color_config(pe_x, pe_y, RXACT_B_EVEN, .{ .routes = ccr_B_RS });


                }else if(pe_y == height-1){
                    // px = 0, pe_y = height-1

                    if(pe_y % 2 == 1){
                        // odd row
                        const route = @concat_structs(
                        .{ .RXACT_B = RXACT_B_EVEN, .TXACT_B=NONE, .RXACT_C = NONE, .TXACT_C = C_REDUCE_EVEN},
                        .{ .memcpyParams = memcpyParams_col } );
                    
                        @set_tile_code(pe_x, pe_y, "spmm_csc_memcpy.csl", @concat_structs(route, comm_params) );
                        @set_color_config(pe_x, pe_y, C_REDUCE_EVEN, .{ .routes = ccr_C_RE });
                        @set_color_config(pe_x, pe_y, RXACT_B_EVEN, .{ .routes = ccr_B_NR });
                    }else{
                        // even row
                        const route = @concat_structs(
                        .{ .RXACT_B = RXACT_B_ODD, .TXACT_B=NONE, .RXACT_C = NONE, .TXACT_C = C_REDUCE_EVEN},
                        .{ .memcpyParams = memcpyParams_col } );

                        @set_tile_code(pe_x, pe_y, "spmm_csc_memcpy.csl", @concat_structs(route, comm_params) );
                        @set_color_config(pe_x, pe_y, C_REDUCE_EVEN, .{ .routes = ccr_C_RE });
                        @set_color_config(pe_x, pe_y, RXACT_B_ODD, .{ .routes = ccr_B_NR });
                    }
                    
                }else{
                    // px = 0, pe_y = between
                    if(pe_y % 2 == 1){
                        // odd row
                        const route = @concat_structs(
                        .{ .RXACT_B = RXACT_B_EVEN, .TXACT_B=RXACT_B_ODD, .RXACT_C = NONE, .TXACT_C = C_REDUCE_EVEN},
                        .{ .memcpyParams = memcpyParams_col } );
                    
                        @set_tile_code(pe_x, pe_y, "spmm_csc_memcpy.csl", @concat_structs(route, comm_params) );
                        @set_color_config(pe_x, pe_y, C_REDUCE_EVEN, .{ .routes = ccr_C_RE });
                        @set_color_config(pe_x, pe_y, RXACT_B_EVEN, .{ .routes = ccr_B_NR });
                        @set_color_config(pe_x, pe_y, RXACT_B_ODD, .{ .routes = ccr_B_RS });
                    }else{
                        // even row
                        const route = @concat_structs(
                        .{ .RXACT_B = RXACT_B_ODD, .TXACT_B=RXACT_B_EVEN, .RXACT_C = NONE, .TXACT_C = C_REDUCE_EVEN},
                        .{ .memcpyParams = memcpyParams_col } );
                    
                        @set_tile_code(pe_x, pe_y, "spmm_csc_memcpy.csl", @concat_structs(route, comm_params) );
                        @set_color_config(pe_x, pe_y, C_REDUCE_EVEN, .{ .routes = ccr_C_RE });
                        @set_color_config(pe_x, pe_y, RXACT_B_EVEN, .{ .routes = ccr_B_RS });
                        @set_color_config(pe_x, pe_y, RXACT_B_ODD, .{ .routes = ccr_B_NR });
                    }
                }

            }else if(pe_x == width-1){
                

                if(pe_y == 0){
                    // px = width-1, pe_y = 0

                    if(pe_x % 2 == 1){
                        // odd column
                        const route = @concat_structs(
                            .{ .RXACT_B = NONE, .TXACT_B=RXACT_B_EVEN, .RXACT_C = C_REDUCE_EVEN, .TXACT_C = NONE},
                            .{ .memcpyParams = memcpyParams_col } );
                        
                        @set_tile_code(pe_x, pe_y, "spmm_csc_memcpy.csl", @concat_structs(route, comm_params) );
                        @set_color_config(pe_x, pe_y, C_REDUCE_EVEN, .{ .routes = ccr_C_WR });
                        @set_color_config(pe_x, pe_y, RXACT_B_EVEN, .{ .routes = ccr_B_RS });
                    }else{
                        // even column
                        const route = @concat_structs(
                            .{ .RXACT_B = NONE, .TXACT_B=RXACT_B_EVEN, .RXACT_C = C_REDUCE_ODD, .TXACT_C = NONE},
                            .{ .memcpyParams = memcpyParams_col } );
                        
                        @set_tile_code(pe_x, pe_y, "spmm_csc_memcpy.csl", @concat_structs(route, comm_params) );
                        @set_color_config(pe_x, pe_y, C_REDUCE_ODD, .{ .routes = ccr_C_WR });
                        @set_color_config(pe_x, pe_y, RXACT_B_EVEN, .{ .routes = ccr_B_RS });
                    }



                }else if(pe_y == height-1){
                    // px = width-1, pe_y = height-1

                    if(pe_x % 2 == 1){
                        // odd column

                        if(pe_y % 2 == 1){
                            // odd row
                            const route = @concat_structs(
                            .{ .RXACT_B = RXACT_B_EVEN, .TXACT_B=NONE, .RXACT_C = C_REDUCE_EVEN, .TXACT_C = NONE},
                            .{ .memcpyParams = memcpyParams_col } );
                        
                            @set_tile_code(pe_x, pe_y, "spmm_csc_memcpy.csl", @concat_structs(route, comm_params) );
                            @set_color_config(pe_x, pe_y, C_REDUCE_EVEN, .{ .routes = ccr_C_WR });
                            @set_color_config(pe_x, pe_y, RXACT_B_EVEN, .{ .routes = ccr_B_NR });
                        }else{
                            // even row
                            const route = @concat_structs(
                            .{ .RXACT_B = RXACT_B_ODD, .TXACT_B=NONE, .RXACT_C = C_REDUCE_EVEN, .TXACT_C = NONE},
                            .{ .memcpyParams = memcpyParams_col } );
                        
                            @set_tile_code(pe_x, pe_y, "spmm_csc_memcpy.csl", @concat_structs(route, comm_params) );
                            @set_color_config(pe_x, pe_y, C_REDUCE_EVEN, .{ .routes = ccr_C_WR });
                            @set_color_config(pe_x, pe_y, RXACT_B_ODD, .{ .routes = ccr_B_NR });
                        }
                        
                    }else{
                        // even column

                        if(pe_y % 2 == 1){
                            // odd row
                            const route = @concat_structs(
                            .{ .RXACT_B = RXACT_B_EVEN, .TXACT_B=NONE, .RXACT_C = C_REDUCE_ODD, .TXACT_C = NONE},
                            .{ .memcpyParams = memcpyParams_col } );
                        
                            @set_tile_code(pe_x, pe_y, "spmm_csc_memcpy.csl", @concat_structs(route, comm_params) );
                            @set_color_config(pe_x, pe_y, C_REDUCE_ODD, .{ .routes = ccr_C_WR });
                            @set_color_config(pe_x, pe_y, RXACT_B_EVEN, .{ .routes = ccr_B_NR });
                        }else{
                            // even row
                            const route = @concat_structs(
                            .{ .RXACT_B = RXACT_B_ODD, .TXACT_B=NONE, .RXACT_C = C_REDUCE_ODD, .TXACT_C = NONE},
                            .{ .memcpyParams = memcpyParams_col } );
                        
                            @set_tile_code(pe_x, pe_y, "spmm_csc_memcpy.csl", @concat_structs(route, comm_params) );
                            @set_color_config(pe_x, pe_y, C_REDUCE_ODD, .{ .routes = ccr_C_WR });
                            @set_color_config(pe_x, pe_y, RXACT_B_ODD, .{ .routes = ccr_B_NR });
                        }
                    }                    

                }else{
                    // px = width-1, pe_y = between

                    if(pe_x % 2 == 1){
                        // odd column

                        if(pe_y % 2 == 1){
                            // odd row
                            const route = @concat_structs(
                                .{ .RXACT_B = RXACT_B_EVEN, .TXACT_B=RXACT_B_ODD, .RXACT_C = C_REDUCE_EVEN, .TXACT_C = NONE},
                                .{ .memcpyParams = memcpyParams_col } );
                            
                            @set_tile_code(pe_x, pe_y, "spmm_csc_memcpy.csl", @concat_structs(route, comm_params) );
                            @set_color_config(pe_x, pe_y, C_REDUCE_EVEN, .{ .routes = ccr_C_WR });
                            @set_color_config(pe_x, pe_y, RXACT_B_EVEN, .{ .routes = ccr_B_NR });
                            @set_color_config(pe_x, pe_y, RXACT_B_ODD, .{ .routes = ccr_B_RS });

                        }else{
                            // even row
                            const route = @concat_structs(
                            .{ .RXACT_B = RXACT_B_ODD, .TXACT_B=RXACT_B_EVEN, .RXACT_C = C_REDUCE_EVEN, .TXACT_C = NONE},
                            .{ .memcpyParams = memcpyParams_col } );
                        
                            @set_tile_code(pe_x, pe_y, "spmm_csc_memcpy.csl", @concat_structs(route, comm_params) );
                            @set_color_config(pe_x, pe_y, C_REDUCE_EVEN, .{ .routes = ccr_C_WR });
                            @set_color_config(pe_x, pe_y, RXACT_B_EVEN, .{ .routes = ccr_B_RS });
                            @set_color_config(pe_x, pe_y, RXACT_B_ODD, .{ .routes = ccr_B_NR });
                        }
                        
                    }else{
                        // even column

                        if(pe_y % 2 == 1){
                            // odd row
                            const route = @concat_structs(
                                .{ .RXACT_B = RXACT_B_EVEN, .TXACT_B=RXACT_B_ODD, .RXACT_C = C_REDUCE_ODD, .TXACT_C = NONE},
                                .{ .memcpyParams = memcpyParams_col } );
                            
                            @set_tile_code(pe_x, pe_y, "spmm_csc_memcpy.csl", @concat_structs(route, comm_params) );
                            @set_color_config(pe_x, pe_y, C_REDUCE_ODD, .{ .routes = ccr_C_WR });
                            @set_color_config(pe_x, pe_y, RXACT_B_EVEN, .{ .routes = ccr_B_NR });
                            @set_color_config(pe_x, pe_y, RXACT_B_ODD, .{ .routes = ccr_B_RS });

                        }else{
                            // even row
                            const route = @concat_structs(
                            .{ .RXACT_B = RXACT_B_ODD, .TXACT_B=RXACT_B_EVEN, .RXACT_C = C_REDUCE_ODD, .TXACT_C = NONE},
                            .{ .memcpyParams = memcpyParams_col } );
                        
                            @set_tile_code(pe_x, pe_y, "spmm_csc_memcpy.csl", @concat_structs(route, comm_params) );
                            @set_color_config(pe_x, pe_y, C_REDUCE_ODD, .{ .routes = ccr_C_WR });
                            @set_color_config(pe_x, pe_y, RXACT_B_EVEN, .{ .routes = ccr_B_RS });
                            @set_color_config(pe_x, pe_y, RXACT_B_ODD, .{ .routes = ccr_B_NR });
                        }
                    }     

                }       
            }else{

                if(pe_y == 0){
                    // px = between, pe_y = 0

                    if(pe_x % 2 == 1){
                        // odd column
                        const route = @concat_structs(
                        .{ .RXACT_B = NONE, .TXACT_B=RXACT_B_EVEN, .RXACT_C = C_REDUCE_EVEN, .TXACT_C = C_REDUCE_ODD},
                        .{ .memcpyParams = memcpyParams_col } );
                    
                        @set_tile_code(pe_x, pe_y, "spmm_csc_memcpy.csl", @concat_structs(route, comm_params) );
                        @set_color_config(pe_x, pe_y, C_REDUCE_EVEN, .{ .routes = ccr_C_WR });
                        @set_color_config(pe_x, pe_y, C_REDUCE_ODD, .{ .routes = ccr_C_RE });
                        @set_color_config(pe_x, pe_y, RXACT_B_EVEN, .{ .routes = ccr_B_RS });
                    }else{
                        // even column
                        const route = @concat_structs(
                        .{ .RXACT_B = NONE, .TXACT_B=RXACT_B_EVEN, .RXACT_C = C_REDUCE_ODD, .TXACT_C = C_REDUCE_EVEN},
                        .{ .memcpyParams = memcpyParams_col } );
                    
                        @set_tile_code(pe_x, pe_y, "spmm_csc_memcpy.csl", @concat_structs(route, comm_params) );
                        @set_color_config(pe_x, pe_y, C_REDUCE_EVEN, .{ .routes = ccr_C_RE });
                        @set_color_config(pe_x, pe_y, C_REDUCE_ODD, .{ .routes = ccr_C_WR });
                        @set_color_config(pe_x, pe_y, RXACT_B_EVEN, .{ .routes = ccr_B_RS });
                    }

                }else if(pe_y == height-1){
                    // px = between, pe_y = height-1
                    if(pe_y % 2 == 1){
                        // odd row
                        if(pe_x % 2 == 1){
                            // odd column
                            const route = @concat_structs(
                            .{ .RXACT_B = RXACT_B_EVEN, .TXACT_B=NONE, .RXACT_C = C_REDUCE_EVEN, .TXACT_C = C_REDUCE_ODD},
                            .{ .memcpyParams = memcpyParams_col } );
                        
                            @set_tile_code(pe_x, pe_y, "spmm_csc_memcpy.csl", @concat_structs(route, comm_params) );
                            @set_color_config(pe_x, pe_y, C_REDUCE_EVEN, .{ .routes = ccr_C_WR });
                            @set_color_config(pe_x, pe_y, C_REDUCE_ODD, .{ .routes = ccr_C_RE });
                            @set_color_config(pe_x, pe_y, RXACT_B_EVEN, .{ .routes = ccr_B_NR });
                        }else{
                            // even column
                            const route = @concat_structs(
                            .{ .RXACT_B = RXACT_B_EVEN, .TXACT_B=NONE, .RXACT_C = C_REDUCE_ODD, .TXACT_C = C_REDUCE_EVEN},
                            .{ .memcpyParams = memcpyParams_col } );
                        
                            @set_tile_code(pe_x, pe_y, "spmm_csc_memcpy.csl", @concat_structs(route, comm_params) );
                            @set_color_config(pe_x, pe_y, C_REDUCE_EVEN, .{ .routes = ccr_C_RE });
                            @set_color_config(pe_x, pe_y, C_REDUCE_ODD, .{ .routes = ccr_C_WR });
                            @set_color_config(pe_x, pe_y, RXACT_B_EVEN, .{ .routes = ccr_B_NR });
                        }
                    }else{
                        // even row
                        if(pe_x % 2 == 1){
                            // odd column
                            const route = @concat_structs(
                            .{ .RXACT_B = RXACT_B_ODD, .TXACT_B=NONE, .RXACT_C = C_REDUCE_EVEN, .TXACT_C = C_REDUCE_ODD},
                            .{ .memcpyParams = memcpyParams_col } );
                        
                            @set_tile_code(pe_x, pe_y, "spmm_csc_memcpy.csl", @concat_structs(route, comm_params) );
                            @set_color_config(pe_x, pe_y, C_REDUCE_EVEN, .{ .routes = ccr_C_WR });
                            @set_color_config(pe_x, pe_y, C_REDUCE_ODD, .{ .routes = ccr_C_RE });
                            @set_color_config(pe_x, pe_y, RXACT_B_ODD, .{ .routes = ccr_B_NR });
                        }else{
                            // even column
                            const route = @concat_structs(
                            .{ .RXACT_B = RXACT_B_ODD, .TXACT_B=NONE, .RXACT_C = C_REDUCE_ODD, .TXACT_C = C_REDUCE_EVEN},
                            .{ .memcpyParams = memcpyParams_col } );
                        
                            @set_tile_code(pe_x, pe_y, "spmm_csc_memcpy.csl", @concat_structs(route, comm_params) );
                            @set_color_config(pe_x, pe_y, C_REDUCE_EVEN, .{ .routes = ccr_C_RE });
                            @set_color_config(pe_x, pe_y, C_REDUCE_ODD, .{ .routes = ccr_C_WR });
                            @set_color_config(pe_x, pe_y, RXACT_B_ODD, .{ .routes = ccr_B_NR });
                        }
                    }


                }else{
                    // px = between, pe_y = between
                    if(pe_y % 2 == 1){
                        // odd row
                        if(pe_x % 2 == 1){
                            // odd column
                            const route = @concat_structs(
                            .{ .RXACT_B = RXACT_B_EVEN, .TXACT_B=RXACT_B_ODD, .RXACT_C = C_REDUCE_EVEN, .TXACT_C = C_REDUCE_ODD},
                            .{ .memcpyParams = memcpyParams_col } );
                        
                            @set_tile_code(pe_x, pe_y, "spmm_csc_memcpy.csl", @concat_structs(route, comm_params) );
                            @set_color_config(pe_x, pe_y, C_REDUCE_EVEN, .{ .routes = ccr_C_WR });
                            @set_color_config(pe_x, pe_y, C_REDUCE_ODD, .{ .routes = ccr_C_RE });
                            @set_color_config(pe_x, pe_y, RXACT_B_ODD, .{ .routes = ccr_B_RS });
                            @set_color_config(pe_x, pe_y, RXACT_B_EVEN, .{ .routes = ccr_B_NR });
                        }else{
                            // even column
                            const route = @concat_structs(
                            .{ .RXACT_B = RXACT_B_EVEN, .TXACT_B=RXACT_B_ODD, .RXACT_C = C_REDUCE_ODD, .TXACT_C = C_REDUCE_EVEN},
                            .{ .memcpyParams = memcpyParams_col } );
                        
                            @set_tile_code(pe_x, pe_y, "spmm_csc_memcpy.csl", @concat_structs(route, comm_params) );
                            @set_color_config(pe_x, pe_y, C_REDUCE_EVEN, .{ .routes = ccr_C_RE });
                            @set_color_config(pe_x, pe_y, C_REDUCE_ODD, .{ .routes = ccr_C_WR });
                            @set_color_config(pe_x, pe_y, RXACT_B_ODD, .{ .routes = ccr_B_RS });
                            @set_color_config(pe_x, pe_y, RXACT_B_EVEN, .{ .routes = ccr_B_NR });
                        }
                    }else{
                        // even row
                        if(pe_x % 2 == 1){
                            // odd column
                            const route = @concat_structs(
                            .{ .RXACT_B = RXACT_B_ODD, .TXACT_B=RXACT_B_EVEN, .RXACT_C = C_REDUCE_EVEN, .TXACT_C = C_REDUCE_ODD},
                            .{ .memcpyParams = memcpyParams_col } );
                        
                            @set_tile_code(pe_x, pe_y, "spmm_csc_memcpy.csl", @concat_structs(route, comm_params) );
                            @set_color_config(pe_x, pe_y, C_REDUCE_EVEN, .{ .routes = ccr_C_WR });
                            @set_color_config(pe_x, pe_y, C_REDUCE_ODD, .{ .routes = ccr_C_RE });
                            @set_color_config(pe_x, pe_y, RXACT_B_ODD, .{ .routes = ccr_B_NR });
                            @set_color_config(pe_x, pe_y, RXACT_B_EVEN, .{ .routes = ccr_B_RS });
                        }else{
                            // even column
                            const route = @concat_structs(
                            .{ .RXACT_B = RXACT_B_ODD, .TXACT_B=RXACT_B_EVEN, .RXACT_C = C_REDUCE_ODD, .TXACT_C = C_REDUCE_EVEN},
                            .{ .memcpyParams = memcpyParams_col } );
                        
                            @set_tile_code(pe_x, pe_y, "spmm_csc_memcpy.csl", @concat_structs(route, comm_params) );
                            @set_color_config(pe_x, pe_y, C_REDUCE_EVEN, .{ .routes = ccr_C_RE });
                            @set_color_config(pe_x, pe_y, C_REDUCE_ODD, .{ .routes = ccr_C_WR });
                            @set_color_config(pe_x, pe_y, RXACT_B_ODD, .{ .routes = ccr_B_NR });
                            @set_color_config(pe_x, pe_y, RXACT_B_EVEN, .{ .routes = ccr_B_RS });
                        }
                    }
                    
                }          
            }
            
        }
    }

    // export symbol name
    @export_name("A", [*]f32, true);
    @export_name("B", [*]f32, true);
    @export_name("C", [*]f32, true);
    @export_name("startBuffer", [*]f32, true);
    @export_name("finishBuffer", [*]f32, true);
}
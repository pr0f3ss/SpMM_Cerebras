param pe_id: u16;

// Import two instances of <debug>:
// `trace` records comptime string and value of 'global'
// `times` records timestamps at begin and end of tasks
const trace = @import_module("<debug>", .{.buffer_size = 100});
const times = @import_module("<debug>", .{.buffer_size = 100});


const broadcast_color = @get_color(11);

const rect_height = @get_rectangle().height;
const rect_width = @get_rectangle().width;

const x_color = @get_color(14);
const Nx = 1; //Vector length

var data = @constants([Nx]f32, if (pe_id == rect_width - 1) 1.0 else 0.0);

var memDsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{Nx} -> data[i]});
var sendDsd = @get_dsd(fabout_dsd, .{.extent = Nx, .fabric_color = broadcast_color, .advance_switch=true});
var recvDsd = @get_dsd(fabin_dsd, .{.extent = Nx, .fabric_color = broadcast_color});


// Reduction Task
task task_x() void {

  var count: u16 = 0;
  if (pe_id == rect_width - 1) {
    @fmovs(sendDsd, memDsd);
  } else {
    // times.trace_timestamp();
    @fmovs(memDsd, recvDsd);
    // times.trace_timestamp();
  }
}
comptime {
  @bind_task(task_x, x_color);
  @activate(x_color);
  @block(broadcast_color);
  @set_local_color_config(broadcast_color, .{.routes = .{.rx = if (pe_id == rect_width - 1) .{RAMP} else .{EAST}, .tx = if (pe_id == rect_width - 1) .{WEST} else .{WEST, RAMP}}});
}
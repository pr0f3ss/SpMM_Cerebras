param pe_id: u16;
param Nx: u16;
param reduce_recv_color: color;
param reduce_send_color: color;

const trace = @import_module("<debug>", .{.buffer_size = 100});
const times = @import_module("<debug>", .{.buffer_size = 100});

const rect_height = @get_rectangle().height;
const rect_width = @get_rectangle().width;

const x_color = @get_color(14);

var data = @constants([Nx]f32, 1.0);

var memDsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{Nx} -> data[i]});
var sendDsd = @get_dsd(fabout_dsd, .{.extent = Nx, .fabric_color = reduce_send_color});
var recvDsd = @get_dsd(fabin_dsd, .{.extent = Nx, .fabric_color = reduce_recv_color});

// Reduction Task
task task_x() void {
  times.trace_timestamp();
  if (pe_id + 1== rect_width) {
    @fmovs(sendDsd, memDsd);
  } else if (pe_id != 0) {
    @fadds(sendDsd, memDsd, recvDsd);
  } else {

    @fadds(memDsd, memDsd, recvDsd);
    
    times.trace_timestamp();
  }
}

comptime {
  @bind_task(task_x, x_color);
  @activate(x_color);
  @block(reduce_recv_color);

  @set_local_color_config(reduce_recv_color, .{.routes = .{.rx = .{EAST}, .tx = .{RAMP}}});

  @set_local_color_config(reduce_send_color, .{.routes = .{.rx = .{RAMP}, .tx = .{WEST}}});
}
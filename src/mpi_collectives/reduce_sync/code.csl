param pe_id: u16;

const reduce_color = @get_color(11);
const notify_color = @get_color(12);

const rect_height = @get_rectangle().height;
const rect_width = @get_rectangle().width;

const x_color = @get_color(14);
const Nx = 128; //Vector length

const rev_id: u16 = rect_width - (pe_id + 1);

var data = @constants([Nx]f32, 1.0);
var notify_data = @constants([1]u32, 1);


fn get_iter_count() u16 {
  var i: u16 = 0;
  var pow: u16 = 1;
  
  if (pe_id > 0) {
    while (rev_id & pow != 0 and pow <= rect_width) : (pow *= 2) {
      i += 1;
    }
  } else {
    while (pow <= rect_width) : (pow *= 2) {
      if (rev_id & pow != 0) {
        i += 1;
      }
    }
  }

  return i;
}

const iterations = comptime get_iter_count();

fn snd_ctrl() bool {
  var i: u16 = 0;
  var pow: u16 = 1;

  if (pe_id == 0) return false;
  
  while (rev_id & pow != 0 and pow <= rect_width) : (pow *= 2) {
    i += 1;
  }

  pow *= 2;

  if (pow <= rect_width and rev_id & pow == 0) return true;

  return false;
}

const is_ctrl = comptime snd_ctrl();
const is_notify = if (is_ctrl) false else true;

var memDsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{Nx} -> data[i]});
var memNotifyDsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{1} -> notify_data[i]});
var sendReduceDsd = @get_dsd(fabout_dsd, .{.extent = Nx, .fabric_color = reduce_color});
var sendNotifyDsd = @get_dsd(fabout_dsd, .{.extent = 1, .fabric_color = notify_color});
var recvReduceDsd = @get_dsd(fabin_dsd, .{.extent = Nx, .fabric_color = reduce_color});
var recvNotifyDsd = @get_dsd(fabin_dsd, .{.extent = 1, .fabric_color = notify_color, .input_queue = 0});
var ctrlReduceDsd = @get_dsd(fabout_dsd, .{.extent = 1, .fabric_color = reduce_color, .control = true});
var ctrlNotifyDsd = @get_dsd(fabout_dsd, .{.extent = 1, .fabric_color = notify_color, .control = true});

// Opcodes for potentially updating switches
const opcode_nop = 0;
const opcode_switch_advance = 1;
const opcode_switch_reset = 2;
const opcode_teardown = 3;

// Helper function to construct the payload of the control wavelet.
// args:
//    ceFilter: a filter bit to disable transmission from the destination
//              router to the destination CE,
//    opcode: switching opcode (see comment above), and
//    data: 16-bit wavelet data
fn ctrl(ce_filter: bool, opcode: i16, data: u16) u32 {
  const six = @as(u32, 6);
  const eight = @as(u32, 8);
  const sixteen = @as(u32, 16);

  const hi_word = @as(u32, 1) |
                  @as(u32, opcode) << six |
                  @as(u32, ce_filter) << eight;

  const lo_word = @as(u32, data);
  return hi_word << sixteen | lo_word;
}

// Reduction Task
task task_x() void {
  @mov32(memNotifyDsd, recvNotifyDsd, .{.async = true, .unblock = task_send});

  var count: u16 = 0;
  while (count < iterations) : (count += 1) {
    @fadds(memDsd, memDsd, recvReduceDsd);
  }

  if (iterations > 0) {
    @mov32(ctrlReduceDsd, comptime ctrl(true, opcode_switch_advance, 0x00));
  }

  @activate(notify_color);
}

task task_send() void {
  @fmovs(sendReduceDsd, memDsd);

  // if (is_ctrl) {
  //   @mov32(ctrlReduceDsd, comptime ctrl(true, opcode_switch_advance, 0x00));
  // }

  @mov32(ctrlNotifyDsd, comptime ctrl(true, opcode_switch_advance, 0x00));

  if (is_notify) {
    @mov32(sendNotifyDsd, 1);
  }
  @block(notify_color);
}

const switches_reduce = .{
  .pos1 = .{ .tx = WEST },
  .current_switch_pos = 0
};

const switches_notify = .{
  .pos1 = .{ .tx = EAST },
  .current_switch_pos = 0,
  .ring_mode = true
};

fn tx() comptime_struct {
  if (iterations > 0) {
    return .{RAMP};
  } else {
    return .{WEST};
  }
}

fn start_task() color {
  if (iterations > 0) return x_color;
  return notify_color;
}

comptime {
  @bind_task(task_x, x_color);
  @bind_task(task_send, notify_color);
  @activate(comptime start_task());
  @block(reduce_color);
  @set_local_color_config(reduce_color, .{.routes = .{.rx = .{RAMP, EAST}, .tx = comptime tx()}, .switches = switches_reduce});
  if (comptime iterations > 0 and (!(pe_id == 1))) @block(notify_color) else 1;
  @set_local_color_config(notify_color, .{.routes = .{.rx = .{RAMP, WEST}, .tx = .{RAMP}}, .switches = switches_notify});
}